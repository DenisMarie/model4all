#!/usr/bin/env Rscript

# Aim: wrapper to evaluate model fit
# Copyright (C) 2015-2016 INRA
# License: AGPL-3+
# Persons: Timothee Flutre [cre,aut]
# Versioning: https://github.com/timflutre/model4all

prog.name <- "model4all_eval"
prog.version <- "0.1.0" # http://semver.org/

R.v.maj <- as.numeric(R.version$major)
R.v.min.1 <- as.numeric(strsplit(R.version$minor, "\\.")[[1]][1])
if(R.v.maj < 2 || (R.v.maj == 2 && R.v.min.1 < 15))
    stop("require R >= 2.15 (for paste0)", call.=FALSE)

##' Display the help on stdout
##'
##' The format complies with help2man (http://www.gnu.org/s/help2man) but use --no-discard-stderr
##' @title Help
help <- function(){
  txt <- paste0("`", prog.name, "' is a wrapper to evaluate model fit.\n")
  txt <- paste0(txt, "\n")
  txt <- paste0(txt, "Usage: ", prog.name, " [OPTIONS] ...\n")
  txt <- paste0(txt, "\n")
  txt <- paste0(txt, "Options:\n")
  txt <- paste0(txt, "  -h, --help\tdisplay the help and exit\n")
  txt <- paste0(txt, "  -V, --version\toutput version information and exit\n")
  txt <- paste0(txt, "  -v, --verbose\tverbosity level (0/default=1/2/3)\n")
  txt <- paste0(txt, "      --theme\tname of the theme (e.g. 'quantgen')\n")
  txt <- paste0(txt, "      --src\tpath to the directory containing '<theme>_eval.R'\n")
  txt <- paste0(txt, "\t\tthis file should contain at least these functions:\n")
  txt <- paste0(txt, "\t\t- <theme>EvalMain\n")
  txt <- paste0(txt, "\t\t- <theme>EvalHelp\n")
  txt <- paste0(txt, "\t\t- <theme>EvalVersion\n")
  txt <- paste0(txt, "\t\tfunctions below are optional but strongly advised:\n")
  txt <- paste0(txt, "\t\t- <theme>EvalParseArgs\n")
  txt <- paste0(txt, "\t\t- <theme>EvalCheckOptions\n")
  txt <- paste0(txt, "      --themhlp\texecute '<theme>EvalHelp'\n")
  txt <- paste0(txt, "      --themver\texecute '<theme>EvalVersion'\n")
  txt <- paste0(txt, "      --args\targuments for the '<theme>EvalMain'\n")
  txt <- paste0(txt, "\t\tas a string, e.g. \"--fdr 0.05\"\n")
  txt <- paste0(txt, "      --task\tname of the task (default='test')\n")
  txt <- paste0(txt, "\t\twill be used as a prefix for input and output files\n")
  txt <- paste0(txt, "      --simd\tpath to the 'simulation' directory\n")
  txt <- paste0(txt, "\t\tfrom which files will be loaded; current by default\n")
  txt <- paste0(txt, "      --infd\tpath to the 'inference' directory\n")
  txt <- paste0(txt, "\t\tfrom which files will be loaded; current by default\n")
  txt <- paste0(txt, "      --evad\tpath to the 'evaluation' directory\n")
  txt <- paste0(txt, "\t\tto which files will be saved; current by default\n")
  txt <- paste0(txt, "      --sid\tidentifier of the simulation to use (e.g. '1' for the first)\n")
  txt <- paste0(txt, "\t\totherwise use all of them\n")
  txt <- paste0(txt, "      --ncores\tnumber of cores to use (default=1)\n")
  txt <- paste0(txt, "\t\tso that all inferences can be evaluated in parallel\n")
  txt <- paste0(txt, "\n")
  txt <- paste0(txt, "Examples:\n")
  txt <- paste0(txt, "  ", prog.name, " --theme quantgen --src ../src\n")
  txt <- paste0(txt, "\n")
  txt <- paste0(txt, "Report bugs to <timothee.flutre@supagro.inra.fr>.")
  write(txt, stdout())
}

##' Display version and license information on stdout
##'
##' The person roles comply with R's guidelines (The R Journal Vol. 4/1, June 2012). To comply with help2man (http://www.gnu.org/s/help2man), use --no-discard-stderr.
##' @title Version
version <- function(){
  txt <- paste0(prog.name, " ", prog.version, "\n")
  txt <- paste0(txt, "\n")
  txt <- paste0(txt, "Copyright (C) 2015-2016 INRA.\n")
  txt <- paste0(txt, "License AGPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/agpl.html>\n")
  txt <- paste0(txt, "\n")
  txt <- paste0(txt, "Written by Timothee Flutre [cre,aut].")
  write(txt, stdout())
}

##' Parse the program arguments
##'
##' Allow short and long options
##' @param prog.args character vector
##' @param prog.opts named list of program options with default values
##' @return named list
##' @author Timothee Flutre
parseArgs <- function(prog.args, prog.opts){
  i <- 0
  while(i < length(prog.args)){
    i <- i + 1
    if(prog.args[i] == "-h" || prog.args[i] == "--help"){
      help()
      quit("no", status=0)
    }
    else if(prog.args[i] == "-V" || prog.args[i] == "--version"){
      version()
      quit("no", status=0)
    }
    else if(prog.args[i] == "-v" || prog.args[i] == "--verbose"){
      prog.opts$verbose <- as.numeric(prog.args[i+1])
      i <- i + 1
    }
    else if(prog.args[i] == "--theme"){
      prog.opts$theme <- prog.args[i+1]
      i <- i + 1
    }
    else if(prog.args[i] == "--src"){
      prog.opts$src.dir <- prog.args[i+1]
      i <- i + 1
    }
    else if(prog.args[i] == "--themhlp"){
      prog.opts$theme.help <- TRUE
    }
    else if(prog.args[i] == "--themver"){
      prog.opts$theme.version <- TRUE
    }
    else if(prog.args[i] == "--args"){
      prog.opts$eval.args <- strsplit(x=prog.args[i+1],
                                      split=" ")[[1]]
      i <- i + 1
    }
    else if(prog.args[i] == "--task"){
      prog.opts$task <- prog.args[i+1]
      i <- i + 1
    }
    else if(prog.args[i] == "--simd"){
      prog.opts$simul.dir <- prog.args[i+1]
      i <- i + 1
    }
    else if(prog.args[i] == "--infd"){
      prog.opts$infer.dir <- prog.args[i+1]
      i <- i + 1
    }
    else if(prog.args[i] == "--evad"){
      prog.opts$eval.dir <- prog.args[i+1]
      i <- i + 1
    }
    else if(prog.args[i] == "--sid"){
      prog.opts$sid <- as.numeric(prog.args[i+1])
      i <- i + 1
    }
    else if(prog.args[i] == "--ncores"){
      prog.opts$nb.cores <- as.numeric(prog.args[i+1])
      i <- i + 1
    }
    else{
      write(paste0(prog.name, ": invalid option -- ", prog.args[i], "\n"), stderr())
      help()
      quit("no", status=1)
    }
  }

  return(prog.opts)
}

##' Check program options
##'
##' @param prog.opts named list
##' @return nothing
##' @author Timothee Flutre
checkOptions <- function(prog.opts){
  if(is.null(prog.opts$theme)){
    write("ERROR: missing compulsory option --theme\n", stderr())
    help()
    quit("no", status=1)
  }
  if(is.null(prog.opts$src.dir)){
    write("ERROR: missing compulsory option --src\n", stderr())
    help()
    quit("no", status=1)
  }
  if(! dir.exists(prog.opts$src.dir)){
    write(paste0("ERROR: can't find directory ", prog.opts$src.dir, "\n"), stderr())
    help()
    quit("no", status=1)
  }
  prog.opts$theme.file <- paste0(prog.opts$src.dir, "/",
                                 prog.opts$theme, "_eval.R")
  if(! file.exists(prog.opts$theme.file)){
    write(paste0("ERROR: can't find file ", prog.opts$theme.file, "\n"), stderr())
    help()
    quit("no", status=1)
  }
  source(prog.opts$theme.file)
  themeEvalMain <- get(x=paste0(prog.opts$theme, "EvalMain"))
  themeEvalHelp <- get(x=paste0(prog.opts$theme, "EvalHelp"))
  themeEvalVersion <- get(x=paste0(prog.opts$theme, "EvalVersion"))
  if(prog.opts$theme.help){
    themeEvalHelp()
    quit("no", status=0)
  }
  if(prog.opts$theme.version){
    themeEvalVersion()
    quit("no", status=0)
  }
  if(is.null(prog.opts$task)){
    write("ERROR: missing compulsory option --task\n", stderr())
    help()
    quit("no", status=1)
  }
  if(! file.exists(prog.opts$simul.dir)){
    write(paste0("ERROR: can't find directory '", prog.opts$simul.dir, "'\n"),
          stderr())
    help()
    quit("no", status=1)
  }
  if(! file.exists(prog.opts$infer.dir)){
    write(paste0("ERROR: can't find directory '", prog.opts$infer.dir, "'\n"),
          stderr())
    help()
    quit("no", status=1)
  }
  if(! file.exists(prog.opts$eval.dir)){
    dir.create(prog.opts$eval.dir)
  }

  suppressPackageStartupMessages(library(parallel))
}

##' List 'simulation' and 'inference' files
##'
##'
##' @param in.dir character
##' @param task character
##' @param step character
##' @param sid character
##' @param verbose integer
##' @return vector of characters
##' @author Timothee Flutre
listSimulInferFiles <- function(in.dir, task, step, sid=NULL, verbose=0){
  stopifnot(step %in% c("simul", "infer"))

  lFiles <- Sys.glob(paste0(in.dir, "/", task, "_", step, "_*.RData"))

  if(length(lFiles) == 0){
    msg <- paste0("ERROR: can't find any file '", task, "_", step,
                  "_*.RData' in '", in.dir, "'")
    write(msg, stderr())
    quit("no", status=1)
  }

  if(! is.null(sid)){
    if(sid > length(lFiles)){
      write(paste0("ERROR: can't use simulation #", sid,
                   " as there are only ", length(lFiles), " files"),
            stderr())
      quit("no", status=1)
    }
    lFiles <- lFiles[sid]
  }

  if(verbose > 0)
    write(paste0("nb of '", step, "' files: ", length(lFiles)), stdout())

  return(lFiles)
}

##' Perform the evaluation(s)
##'
##'
##' @param prog.opts list
##' @return nothing
##' @author Timothee Flutre
run <- function(prog.opts){
  lSimFiles <- listSimulInferFiles(prog.opts$simul.dir, prog.opts$task, "simul",
                                   prog.opts$sid, prog.opts$verbose)
  lInfFiles <- listSimulInferFiles(prog.opts$infer.dir, prog.opts$task, "infer",
                                   prog.opts$sid, prog.opts$verbose)

  themeEvalMain <- get(x=paste0(prog.opts$theme, "EvalMain"))
  tmp <-
    mclapply(1:length(lSimFiles),
             function(sid){
               if(prog.opts$verbose > 0)
                 write(paste0(sid, "/", length(lSimFiles)), stdout())
               themeEvalMain(prog.args=prog.opts$eval.args,
                             simul.file=lSimFiles[sid],
                             infer.file=lInfFiles[sid],
                             eval.file=paste0(prog.opts$eval.dir, "/",
                                              prog.opts$task, "_eval_", sid, ".RData"))
             },
             mc.cores=prog.opts$nb.cores,
             mc.silent=ifelse(prog.opts$nb.cores > 1, TRUE, FALSE))
}

##' Entry point of the program
##'
##'
##' @return nothing
##' @author Timothee Flutre
main <- function(prog.args){
  prog.opts <- list(verbose=1,
                    theme=NULL,
                    src.dir=getwd(),
                    theme.file=NULL,
                    theme.help=FALSE,
                    theme.version=FALSE,
                    theme.args=NULL,
                    task="test",
                    simul.dir=getwd(),
                    infer.dir=getwd(),
                    eval.dir=getwd(),
                    sid=NULL,
                    nb.cores=1)

  prog.opts <- parseArgs(prog.args, prog.opts)

  checkOptions(prog.opts)

  if(prog.opts$verbose > 0){
    start.time <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
    write(paste0("START ", prog.name, " ", prog.version, " ", start.time),
          stdout())
    prog.args <- commandArgs(trailingOnly=TRUE)
    write(paste("cmd-line:", prog.name, paste(prog.args, collapse=" ")), stdout())
    write(paste0("cwd: ", getwd()), stdout())
  }

  pt <- system.time(run(prog.opts))
  if(prog.opts$verbose > 0)
     print(pt)

  if(prog.opts$verbose > 0){
    end.time <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
    difft <- as.numeric(
        difftime(as.POSIXct(end.time, format="%Y-%m-%d %H:%M:%S"),
                 as.POSIXct(start.time, format="%Y-%m-%d %H:%M:%S"),
                 units="days"))
    ## difft <- 1 + 2/24 + 3/(24*60) + 3/(24*3600) # 1d 2h 3m 4s in days
    difft.d <- floor(difft)
    difft.h <- floor(((difft - difft.d) * 24) %% 24)
    difft.m <- floor(((difft - difft.d - difft.h/24) * 24*60) %% (24 * 60))
    difft.s <- floor(((difft - difft.d - difft.h/24 - difft.m/(24*60)) *
                      24*60*60) %% (24 * 60 * 60))
    run.length <- sprintf("%02i:%02i:%02i", difft.h, difft.m, difft.s)
    write(paste0("END ", prog.name, " ", prog.version, " ", end.time,
                 " (", run.length, ")"), stdout())
    ## print(object.size(x=lapply(ls(), get)), units="Kb") # return an error I don't understand
  }
}

if(! interactive()){
  cmdArgs <- commandArgs(trailingOnly=TRUE)
  main(cmdArgs)
}
